# Justfile for Rust Project Automation
# For Windows users,
# Set the shell to powershell
# Define a variable for the cargo command to allow easy modification if needed
# Variable for helper text (Mind the indentations and use of double quotes)
#
# %s/\v\{\{\s(runner_command)\s(.+)\}/\{\{ variable_name_for_runner \}\} /g
# Can be used to replace the runner_command with the actual command to run

# You may prefer powershell.exe over pwsh.exe, or another shell entirely.
set windows-shell := ["pwsh.exe","--noprofile", "-NoLogo", "-Command"]

cargo := "cargo"
runner_command := "cargo make"

# Default command called when invoking `just` without arguments
default: help

helper_text := """
Run the following commands as `just <command>` or `just <alias>` to execute them.\n
\t\tüìã Available Commands:\n
 -- help             -    Display this help message
 -- build            -    Build the project in debug mode
 -- build-release    -    Build the project in release mode
 -- build-all        -    Build all targets in the project
 -- run              -    Run the project in debug mode
 -- run-release      -    Run the project in release mode
 -- test             -    Run tests for the project
 -- test-all         -    Run all tests in the workspace
 -- test-insta       -    Run Cargo Insta tests
 -- test-no-harness  -    Run tests without capturing stdout
 -- format           -    Format the code using cargo fmt
 -- check            -    Run checks for the project
 -- check-clippy     -    Run clippy for the project
 -- doc              -    Generate documentation for the project
 -- doc-open         -    Generate documentation and open it in the browser
 -- doc-test         -    Generate documentation and run tests
 -- clean            -    Clean the project
 -- reset            -    Reset the project by cleaning and full rebuilding it, including docs generation
 -- simple           -    Run simple commands
 -- full             -    Run full commands

\t\t‚ûï Aliases:\n
 - h                 -     Display this help message
 - b                 -     Build the project in debug mode
 - br                -     Build the project in release mode
 - ba                -     Build all targets in the project
 - a                 -     Build all targets in the project
 - r                 -     Run the project in debug mode
 - rr                -     Run the project in release mode
 - t                 -     Run tests for the project
 - ta                -     Run all tests in the workspace
 - ti                -     Run Cargo Insta tests
 - tnh               -     Run tests without capturing stdout
 - f                 -     Format the code using cargo fmt
 - l                 -     Run checks for the project
 - c                 -     Run checks for the project
 - cp                -     Run clippy for the project
 - la                -     Run clippy for the project
 - d                 -     Generate documentation for the project
 - do                -     Generate documentation and open it in the browser
 - dt                -     Generate documentation and run tests
 - cl                -     Clean the project
 - rst               -     Reset the project by cleaning and full rebuilding it, including docs generation
 - s                 -     Run simple commands
 - dev               -     Run simple commands
 - out               -     Run full commands"""

# ---------------------------------------------------------------------------------
# Recipe: help
# Description: Display available commands.
# Usage: just help

# ---------------------------------------------------------------------------------
help:
    @echo "{{ helper_text }}"

alias h := help

# ---------------------------------------------------------------------------------
# Recipe: build
# Description: Build the project in debug mode.
# Usage: just build

# ---------------------------------------------------------------------------------
build *args='':
    @echo "üî® Building the project in debug mode..."
    {{ runner_command }} b {{ args }}

alias b := build

# ---------------------------------------------------------------------------------
# Recipe: build-release
# Description: Build the project in release mode.
# Usage: just build-release

# ---------------------------------------------------------------------------------
build-release *args='':
    @echo "üî® Building the project in release mode..."
    {{ runner_command }} br {{ args }}

alias br := build-release

# ---------------------------------------------------------------------------------
# Recipe: build-all
# Description: Build all targets in the project.
# Usage: just build-all

# ---------------------------------------------------------------------------------
build-all *args='':
    {{ runner_command }} a {{ args }}

alias ba := build-all
alias a := build-all

# ---------------------------------------------------------------------------------
# Recipe: run
# Description: Run the project in debug mode.
# Usage: just run

# ---------------------------------------------------------------------------------
run *args='':
    @echo "üöÄ Running the project in debug mode..."
    {{ runner_command }} r {{ args }}

alias r := run

# ---------------------------------------------------------------------------------
# Recipe: run-release
# Description: Run the project in release mode.
# Usage: just run-release

# ---------------------------------------------------------------------------------
run-release *args='':
    @echo "üöÄ Running the project in release mode..."
    {{ runner_command }} rr {{ args }}

alias rr := run-release

# ---------------------------------------------------------------------------------
# Recipe: test
# Description: Run tests for the project.
# Usage: just test

# ---------------------------------------------------------------------------------
test *args='':
    @echo "üß™ Running tests..."
    {{ runner_command }} t {{ args }}

alias t := test

# ---------------------------------------------------------------------------------
# Recipe: test-all
# Description: Run all tests in the workspace (if using a workspace).
# Usage: just test-all

# ---------------------------------------------------------------------------------
test-all *args='':
    @echo "üß™ Running all tests in the workspace..."
    {{ runner_command }} ta {{ args }}

alias ta := test-all

# ---------------------------------------------------------------------------------
# Recipe: test-insta
# Description: Run Cargo Insta tests.
# Usage: just test-insta

# ---------------------------------------------------------------------------------
test-insta:
    @echo "üß™ Running Cargo Insta tests..."
    {{ cargo }} insta test --lib

alias ti := test-insta

# ---------------------------------------------------------------------------------
# Recipe: test-no-harness
# Description: Run tests without capturing stdout (useful for debugging).
# Usage: just test-no-harness

# ---------------------------------------------------------------------------------
test-no-harness:
    @echo "üß™ Running tests without capturing stdout..."
    {{ cargo }} test --all-features -- --nocapture

alias tnh := test-no-harness

# ---------------------------------------------------------------------------------
# Recipe: format
# Description: Format the code using `cargo fmt`.
# Usage: just format

# ---------------------------------------------------------------------------------
format *args='':
    @echo "üßπ Running code formatting..."
    {{ runner_command }} f {{ args }}

alias f := format

# ---------------------------------------------------------------------------------
# Recipe: check
# Description: Run code checks using `cargo check`.
# Usage: just check

# ---------------------------------------------------------------------------------
check *args='':
    @echo "üîç Running checks..."
    {{ runner_command }} c {{ args }}

alias l := check
alias c := check

# ---------------------------------------------------------------------------------
# Recipe: check-clippy
# Description: Run code checks using `cargo clippy`.
# Usage: just check-clippy

# ---------------------------------------------------------------------------------
check-clippy *args='':
    @echo "üîç Running linting..."
    {{ runner_command }} cp {{ args }}

alias la := check-clippy
alias cp := check-clippy

# ---------------------------------------------------------------------------------
# Recipe: docs
# Description: Generate documentation for the project.
# Usage: just docs

# ---------------------------------------------------------------------------------
docs:
    @echo "üìö Generating documentation..."
    {{ cargo }}  doc

alias d := docs

# ---------------------------------------------------------------------------------
# Recipe: docs-open
# Description: Generate documentation and open it in the default browser.
# Usage: just docs-open

# ---------------------------------------------------------------------------------
docs-open:
    @echo "üìö Generating documentation and opening it in the browser..."
    {{ cargo }} doc --open

alias do := docs-open

# ---------------------------------------------------------------------------------
# Recipe: docs-test
# Description: Run tests and generate documentation.
# Usage: just docs-test

# ---------------------------------------------------------------------------------
docs-test:
    @echo "üìö Generating documentation and running tests..."
    {{ cargo }} test --doc

alias dt := docs-test

# ---------------------------------------------------------------------------------
# Recipe: clean
# Description: Clean the project.
# Usage: just clean

# ---------------------------------------------------------------------------------
clean *args='':
    @echo "üßπ Cleaning the project..."
    {{ runner_command }} cl {{ args }}

alias cl := clean

# ---------------------------------------------------------------------------------
# Recipe: reset
# Description: Reset the project by cleaning and full rebuilding it. Includes docs gen.
# Usage: just simple

# ---------------------------------------------------------------------------------
reset:
    @echo "üßπ Resetting the project..."
    {{ runner_command }} reset
    @just doc

alias rst := reset

# ---------------------------------------------------------------------------------
# Recipe: simple
# Description: Run the simple build, check, and test commands.
# Usage: just simple

# ---------------------------------------------------------------------------------
simple:
    @echo "üöÄ Running simple..."
    @just build
    @just check
    @just test

alias s := simple
alias dev := simple

# ---------------------------------------------------------------------------------
# Recipe: full
# Description: Run the full build, check-clippy, test, and documentation commands.
# Usage: just full

# ---------------------------------------------------------------------------------
full:
    @echo "üöÄ Running full..."
    @just build-all
    @just check-clippy
    @just test-all
    @just doc

alias out := full
