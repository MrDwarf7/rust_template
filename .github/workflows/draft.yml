name: "Draft"
on:
  push:
    #    branches:
    #      - master
    #      - main
    tags: ["v[0-9]+.[0-9]+.[0-9]?"]
#  workflow_dispatch:
#    inputs:

env:
  SCCACHE_GHA_ENABLED: true
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PROJECT_NAME: "NAME_HERE"
jobs:
  build-unix:
    name: "Draft - build-unix"
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            gcc: gcc-x86-64-linux-gnu
            rust: nightly
    runs-on: ${{ matrix.os }}
    env:
      RUSTC_WRAPPER: sccache
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@master
      - name: "Cache Cargo dependencies"
        uses: Swatinem/rust-cache@v2
      - name: "Setup sccache"
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: "Install gcc"
        if: matrix.gcc != ''
        run: sudo apt update && sudo apt install -yq ${{ matrix.gcc }}
      - name: "Setup Rust toolchain"
        run: rustup toolchain install nightly --profile default --target ${{ matrix.target }} --no-self-update
      - name: "Make script executable # Test if works when already within GH Actions"
        run: chmod +x build/build.sh
      - name: "Build"
        run: ./build/build.sh ${{ matrix.target }}
      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip
          path: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip
          if-no-files-found: 'error'
          compression-level: '9'
          overwrite: 'true'
  build-windows:
    name: "Draft - build-windows"
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust: nightly
    runs-on: ${{ matrix.os }}
    env:
      RUSTC_WRAPPER: sccache
      CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_LINKER: lld-link.exe
    steps:
      - name: "Checkout sources"
        uses: actions/checkout@master
      - name: "Cache Cargo dependencies"
        uses: Swatinem/rust-cache@v2
      - name: "Setup sccache"
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: "Install gcc"
        if: matrix.gcc != ''
        run: sudo apt update && sudo apt install -yq ${{ matrix.gcc }}
      - name: "Setup Rust toolchain"
        run: rustup toolchain install nightly --profile default --target ${{ matrix.target }} --no-self-update
      - name: "Build"
        run: cargo build --release --locked --target ${{ matrix.target }}
      - name: "Pack artifact"
        env:
          TARGET_NAME: ${{ env.PROJECT_NAME }}-${{ matrix.target }}
          DIR: ${{ github.workspace }}
        run: |
          New-Item -ItemType Directory -Path ${env:TARGET_NAME}
          Copy-Item -Path "target\${{ matrix.target }}\release\${{ env.PROJECT_NAME }}.exe" -Destination ${env:TARGET_NAME}
          Copy-Item -Path "README.md", "LICENSE-APACHE", "LICENSE-MIT" -Destination ${env:TARGET_NAME}
          Compress-Archive -Path ${env:TARGET_NAME} -DestinationPath "${env:TARGET_NAME}"
      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}-${{ github.ref_name }}.zip
          path: ${{ env.PROJECT_NAME }}-${{ matrix.target }}.zip
          if-no-files-found: 'error'
          compression-level: '9'
          overwrite: 'true'
  draft:
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-unix, build-windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: "Draft"
        uses: softprops/action-gh-release@master
        with:
          draft: true
          #          make_latest: true ## Drafts & prereleases cannot be set as `make_latest:`
          files: |
            ${{ env.PROJECT_NAME }}-*.zip
          generate_release_notes: true
  #          body_path: ${{ github.workspace }}-CHANGELOG.txt ## For adding changelog content

  nightly:
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [build-unix, build-windows]
    steps:
      - run: |
          echo 'NIGHTLY_BODY<<EOF' >> $GITHUB_ENV
          echo "From commit: ${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "Generated on: $(date -u +"%Y-%m-%d %H:%M") UTC" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: "Update the tag"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag --force nightly && git push --force origin tag nightly
      - name: "Nightly"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly
          prerelease: true
          files: |
            ${{ env.PROJECT_NAME }}-*.zip
          name: Nightly Build
          body: ${{ env.NIGHTLY_BODY }}
          target_commitish: ${{ github.sha }}

